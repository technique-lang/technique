use super::{ValidationError, validate_identifier, validate_forma, WrapError};
use technique::language::*;

grammar;

extern {
    type Error = ValidationError;
}

match {
    r"[A-Za-z0-9_\-\.,\[\]]*" => WORD,
    _
}

pub technique_file: Technique = {
    <m:magic_line>
    <s:spdx_line?>
    <t:template_line?> => {
        let (license, copyright) = match s {
            Some((possible_license, possible_copyright)) => (possible_license, possible_copyright),
            None => (None, None)
        };

        let template = match t {
            Some(possible_template) => possible_template,
            None => None
        };

        Technique {version:m, license, copyright, template}
    }
}

pub identifier: String = {
    <WORD> =>? validate_identifier(<>).wrap()
};

pub forma: Forma = {
    <WORD> =>? validate_forma(<>).wrap()
}

pub magic_line: u8 = {
    "%" "technique" "v1" => 1
};

pub spdx_line: (Option<String>,Option<String>) = {
    "!" <one:license> ";" r"\(c\)|\(C\)|Â©" <two:copyright> => (Some(one.to_owned()),Some(two.to_owned())),
    "!" <one:license> => (Some(one.to_owned()),None)
}

pub template_line: Option<String> = {
    "&" <template> => Some(<>.to_owned())
}

pub template: String = {
    <WORD> => <>.to_owned()
}

pub license: String = {
    <WORD+> => <>.join(" ").to_owned()
};

pub copyright: String = {
    <WORD+> => <>.join(" ").to_owned()
}

pub declaration_line: Procedure = {
    <n:declaration> <s:signature?> =>
        Procedure {
            name: n,
            signature: s
        }
}

pub genus: Genus = {
    <f:forma> => Genus::Single(f)
}

pub signature: Signature = {
    <d:genus> "->" <r:genus> =>
        Signature {
            domain: d,
            range: r
        }
}

pub declaration: String = {
    <identifier> ":" => <>.to_owned()
}

pub attribute_line: Vec<Attribute> = {
    <mut v:(<attribute> "+")*> <e:attribute> => {
            v.push(e);
            v
        }
}

pub attribute: Attribute = {
    "@" <identifier> =>
        Attribute {
            name: <>.to_owned()
        }
}
